@model List<E_Commerce.Entities.Category>
@{
    ViewBag.Title = "Create";
    var imageURL = "/Content/images/system/placeholder-image.png";
}
<style>
    .required {
        color: red;
    }
</style>
<style>
    /* Always set the map height explicitly to define the size of the div
        * element that contains the map. */
    #map {
        height: 100%;
    }
    /* Optional: Makes the sample page fill the window. */
    html, body {
        height: 100%;
        margin: 0;
        padding: 0;
    }

    #description {
        font-family: Roboto;
        font-size: 15px;
        font-weight: 300;
    }

    #infowindow-content .title {
        font-weight: bold;
    }

    #infowindow-content {
        display: none;
    }

    #map #infowindow-content {
        display: inline;
    }

    .pac-card {
        margin: 10px 10px 0 0;
        border-radius: 2px 0 0 2px;
        box-sizing: border-box;
        -moz-box-sizing: border-box;
        outline: none;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
        background-color: #fff;
        font-family: Roboto;
    }

    #pac-container {
        padding-bottom: 12px;
        margin-right: 12px;
    }

    .pac-controls {
        display: inline-block;
        padding: 5px 11px;
    }

        .pac-controls label {
            font-family: Roboto;
            font-size: 13px;
            font-weight: 300;
        }

    #pac-input {
        background-color: #fff;
        font-family: Roboto;
        font-size: 15px;
        font-weight: 300;
        margin-left: 12px;
        padding: 0 11px 0 13px;
        text-overflow: ellipsis;
        width: 400px;
    }

        #pac-input:focus {
            border-color: #4d90fe;
        }

    #title {
        color: #fff;
        background-color: #4d90fe;
        font-size: 25px;
        font-weight: 500;
        padding: 6px 12px;
    }

    #target {
        width: 345px;
    }
</style>
<form id="createProduct">
    <div class="row">
        <div class="col-md-8">
            <div class="form-group">
                <label>Category</label>
                <select id="categorySelect" name="CategoryID" class="form-control">
                    <option>Select One</option>
                    @foreach (var category in Model)
                    {
                        if (category.isFeatured == true)
                        {
                            <option value="@category.ID">@category.Name</option>
                        }

                    }

                </select>
                <p id="categorySelectErroeMessage"></p>
            </div>

            <div class="form-group">
                <label>Name<span class="required">*</span></label>
                <input class="form-control" name="Name" id="Name" />
                <p id="nameErroeMessage"></p>
            </div>
            <div class="form-group">
                <label>Weight<span class="required">*</span></label>
                <input class="form-control" name="Weight" id="Weight" />
                <p id="weightErroeMessage"></p>
            </div>
            <div class="form-group">
                <label>Unit<span class="required">*</span></label>
                <input class="form-control" name="Unit" id="Unit" />
                <p id="unitErroeMessage"></p>
            </div>
            <div class="form-group">
                <label>Price/Unit<span class="required">*</span></label>
                <input class="form-control" name="Price" id="Price" />
                <p id="priceErroeMessage"></p>
            </div>


            <div class="form-group">
                <label>Description<span class="required">*</span></label>
                <textarea class="form-control" name="Description" id="Description"></textarea>
                <p id="descriptionErroeMessage"></p>
            </div>


            <div class="form-group">
                <label>Image<span class="required">*</span></label>
                <input name="ImageURL" id="ImageURL" type="hidden" />
                <input class="form-control" id="imageUpload" name="Image" type="file" accept=".png , .jpg" />
                <p id="imageErroeMessage"></p>
            </div>

            <div class="form-group">
                <label>Latitude<span class="required">*</span></label>
                <input class="form-control" name="latitude" id="latitude" />
                <p id="priceErroeMessage"></p>
            </div>
            <div class="form-group">
                <label>Longitude<span class="required">*</span></label>
                <input class="form-control" name="longitude" id="longitude" />
                <p id="priceErroeMessage"></p>
            </div>
            <div class="form-group">
                <input id="pac-input" class="controls" type="text" placeholder="Search Box">
                <div class="flat-map" id="map"></div>
            </div>
            <button type="button" id="createBtn" class="btn btn-primary" onclick="return validateForm();">Create</button>
            <button type="button" id="cancelBtn" class="btn btn-danger">Cancel</button>
        </div>
        <div class="col-md-4">
            <div class="thumb">
                <img class="img-thumbnail img-fluid" id="productImage" src="@imageURL" />
            </div>
        </div>

    </div>
</form>
<script>

        function validateForm() {
       var select=document.getElementById("categorySelect").value;
        var name = document.getElementById("Name").value;
        var price = document.getElementById("Price").value;
        var unit = document.getElementById("Unit").value;
        var weight= document.getElementById("Weight").value;
        var description = document.getElementById("Description").value;
       var image = document.getElementById("imageUpload").value;

        if (select == "Select One") {

            document.getElementById("categorySelectErroeMessage").innerHTML = "Category must be select";
            document.getElementById("categorySelectErroeMessage").style.color = "red";

        }
        else if (name == "") {

            document.getElementById("nameErroeMessage").innerHTML = "Name must be filled out";
            document.getElementById("nameErroeMessage").style.color = "red";

        }
       else if (price == "") {

            document.getElementById("priceErroeMessage").innerHTML = "Price must be filled out";
            document.getElementById("priceErroeMessage").style.color = "red";

        }
       else if (weight == "") {

            document.getElementById("weightErroeMessage").innerHTML = "Weight must be filled out";
            document.getElementById("weightErroeMessage").style.color = "red";

        }
        else if (unit == "") {

            document.getElementById("unitErroeMessage").innerHTML = "Unit must be filled out";
            document.getElementById("unitErroeMessage").style.color = "red";

        }
       else if (description == "") {

            document.getElementById("descriptionErroeMessage").innerHTML = "Description must be filled out";
            document.getElementById("descriptionErroeMessage").style.color = "red";

        }
       else if (image == "") {

            document.getElementById("imageErroeMessage").innerHTML = "Image must be upload";
            document.getElementById("imageErroeMessage").style.color = "red";

        }
        else {
            $.ajax({
            type: 'POST',
            url: '/Product/Create',
            data: $("#createProduct").serialize()

        })
            .done(function (response) {
                $("#tableContainer").html(response);
                $("#actionContainer").html("");
                 swal("Record Created Successfully.", {
                    icon: "success",
                 });
            })
            .fail(function (XMLHttpRequest, textStatus, errorThrown) {
                alert("Fail");
            });

        }
    }
     $("#imageUpload").change(function () {
        var element = this;

		var formData = new FormData();

		var totalFiles = element.files.length;

		for (var i = 0; i < totalFiles; i++) {
			var file = element.files[i];
			formData.append("Photo", file);
        }

        $.ajax({
			    type: 'POST',
			    url: '@Url.Action("UploadImage", "Shared")',
			    dataType: 'json',
			    data: formData,
			    contentType: false,
			    processData: false
		    })
            .done(function (response) {
        	    console.log(response);

        	    if(response.Success)
        	    {
        		    $("#ImageURL").val(response.ImageURL);
        		    $("#productImage").attr("src", response.ImageURL);
        	    }
            })
            .fail(function (XMLHttpRequest, textStatus, errorThrown) {
        	    alert("FAIL");
            });



    });
    //$("#createBtn").click(function () {

    //    var nameValue = $("#Name").val();
    //    var descriptionValue = $("#Description").val();
    //    var priceValue = $("#Price").val();
    //    $.ajax({
    //        type: 'POST',
    //        url: '/Product/Create',
    //        data: $("#createProduct").serialize()
    //        //data: {

    //        //    Name: nameValue,
    //        //    Description: descriptionValue,
    //        //    Price: priceValue

    //        //}
    //    })
    //        .done(function (response) {
    //            $("#tableContainer").html(response);
    //            $("#actionContainer").html("");
    //             swal("Record Created Successfully.", {
    //                icon: "success",
    //             });
    //        })
    //        .fail(function (XMLHttpRequest, textStatus, errorThrown) {
    //            alert("Fail");
    //        });


    //});

    $("#cancelBtn").click(function () {
        $("#actionContainer").html("");
         focusAction("tableContainer");
    });
</script>
<script>
    // This example adds a search box to a map, using the Google Place Autocomplete
    // feature. People can enter geographical searches. The search box will return a
    // pick list containing a mix of places and predicted search terms.

    // This example requires the Places library. Include the libraries=places
    // parameter when you first load the API. For example:


    function drawMap() {
        var map = new google.maps.Map(document.getElementById('map'), {
            center: { lat: -33.8688, lng: 151.2195 },
            zoom: 13,
            mapTypeId: 'roadmap'
        });

        // Create the search box and link it to the UI element.
        var input = document.getElementById('pac-input');
        var searchBox = new google.maps.places.SearchBox(input);
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

        // Bias the SearchBox results towards current map's viewport.
        map.addListener('bounds_changed', function () {
            searchBox.setBounds(map.getBounds());
        });

        var markers = [];
        // Listen for the event fired when the user selects a prediction and retrieve
        // more details for that place.
        searchBox.addListener('places_changed', function () {
            var places = searchBox.getPlaces();

            if (places.length == 0) {
                return;
            }

            // Clear out the old markers.
            markers.forEach(function (marker) {
                marker.setMap(null);
            });
            markers = [];

            // For each place, get the icon, name and location.
            var bounds = new google.maps.LatLngBounds();
            places.forEach(function (place) {
                if (!place.geometry) {
                    console.log("Returned place contains no geometry");
                    return;
                }
                var icon = {
                    url: place.icon,
                    size: new google.maps.Size(71, 71),
                    origin: new google.maps.Point(0, 0),
                    anchor: new google.maps.Point(17, 34),
                    scaledSize: new google.maps.Size(25, 25)
                };

                // Create a marker for each place.
                markers.push(new google.maps.Marker({
                    map: map,
                    icon: icon,
                    title: place.name,
                    position: place.geometry.location
                }));

                if (place.geometry.viewport) {
                    // Only geocodes have viewport.
                    bounds.union(place.geometry.viewport);
                } else {
                    bounds.extend(place.geometry.location);
                }
            });
            map.fitBounds(bounds);
        });
    }

</script>@*AIzaSyAyJcww05ydypEg66-bXbEKrRqZvsYFcYc*@
@*<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAyJcww05ydypEg66-bXbEKrRqZvsYFcYc&libraries=places&callback=drawMap" async defer></script>*@